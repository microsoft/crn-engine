// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Signature file for parser generated by fsyacc
module Parser
type token = 
  | AT
  | BANG
  | BAR
  | CARAT
  | COMMA
  | EOF
  | GT
  | LB
  | LT
  | NEW
  | RB
  | STAR
  | NAME of (System.String)
  | FLOAT of (float)
  | INT of (int)
type tokenId = 
    | TOKEN_AT
    | TOKEN_BANG
    | TOKEN_BAR
    | TOKEN_CARAT
    | TOKEN_COMMA
    | TOKEN_EOF
    | TOKEN_GT
    | TOKEN_LB
    | TOKEN_LT
    | TOKEN_NEW
    | TOKEN_RB
    | TOKEN_STAR
    | TOKEN_NAME
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_toehold
    | NONTERM_toeholds
    | NONTERM_species
    | NONTERM_complexes
    | NONTERM_complex
    | NONTERM_strands
    | NONTERM_strand
    | NONTERM_sites
    | NONTERM_site
    | NONTERM_domain
    | NONTERM_domainname
    | NONTERM_name
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( SiteGraphReactor.Syntax.t ) 
