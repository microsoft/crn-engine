# Release pipeline

pr:
  branches:
    include:
    - '*'

jobs:
- job: static_analysis

  pool:
    vmImage: 'windows-2019'
    demands:
    - msbuild
    - visualstudio

  timeoutInMinutes: 600

  variables:
    BuildPlatform: 'x64'
    BuildConfiguration: 'release'

  steps:
  - script: 'dotnet tool restore'
    displayName: 'dotnet tool restore'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet restore'
    inputs:
      command: restore
      projects: '**/*.sln'

  # # Oslo
  # - task: VSBuild@1
  #   displayName: 'Build Oslo/Oslo.FSharp.sln'
  #   inputs:
  #     solution: Oslo/Oslo.FSharp.sln
  #     vsVersion: 16.0
  #     configuration: '$(BuildConfiguration)'
  # # CRN CLI
  # - task: VSBuild@1
  #   displayName: 'Build CRNEngine/CRNEngineCli.sln'
  #   inputs:
  #     solution: CRNEngine/CRNEngineCli.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # CRN Server
  # - task: VSBuild@1
  #   displayName: 'Build CRNEngine/CRNEngineServer.sln'
  #   inputs:
  #     solution: CRNEngine/CRNEngineServer.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # CRN HTML
  # - task: VSBuild@1
  #   displayName: 'Build CRNEngine/CRNEngineHTML.sln'
  #   inputs:
  #     solution: CRNEngine/CRNEngineHTML.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # GEC CLI
  # - task: VSBuild@1
  #   displayName: 'Build ClassicGEC/ClassicGECCli.sln'
  #   inputs:
  #     solution: ClassicGEC/ClassicGECCli.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # GEC Server
  # - task: VSBuild@1
  #   displayName: 'Build ClassicGEC/ClassicGECServer.sln'
  #   inputs:
  #     solution: ClassicGEC/ClassicGECServer.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # GEC HTML
  # - task: VSBuild@1
  #   displayName: 'Build ClassicGEC/ClassicGECHTML.sln'
  #   inputs:
  #     solution: ClassicGEC/ClassicGECHTML.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # DSD CLI
  # - task: VSBuild@1
  #   displayName: 'Build ClassicDSD/ClassicDSD.sln'
  #   inputs:
  #     solution: ClassicDSD/ClassicDSD.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # DSD Server
  # - task: VSBuild@1
  #   displayName: 'Build ClassicDSD/ClassicDSDServer.sln'
  #   inputs:
  #     solution: ClassicDSD/ClassicDSDServer.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  # # DSD HTML
  # - task: VSBuild@1
  #   displayName: 'Build ClassicDSD/ClassicDSDHTML5.sln'
  #   inputs:
  #     solution: ClassicDSD/ClassicDSDHTML5.sln
  #     vsVersion: 16.0
  #     platform: '$(BuildPlatform)'
  #     configuration: '$(BuildConfiguration)'

  - task: CredScan@3
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))

  - task: ComponentGovernanceComponentDetection@0
    condition: succeeded()
    inputs:
      scanType: 'Register'
      verbosity: 'Normal'
      alertWarningLevel: 'High'
      failOnAlert: true
      failOnStderr: true

  - task: Semmle@1
    inputs:
      sourceCodeDirectory: '$(Build.SourcesDirectory)'
      language: 'tsandjs'
      includeNodeModules: false
      querySuite: 'Recommended'
      timeout: '1800'
      ram: '16384'
      addProjectDirToScanningExclusionList: true

  - task: PostAnalysis@1
    condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
    displayName: 'Post Analysis'
    inputs:
      CredScan: true
      Semmle: true
